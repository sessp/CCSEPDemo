@{
    ViewBag.Title = "Vulnerable Example";
}

<br />
<div id="addAlert"></div>
<div id="display">
    <div class="full_wrap">
        <div class="login_wrap">
            <div class="title_wrap">
                <p>Login</p>
            </div>
            <div class="content_wrap">
                <div class="input_wrap">
                    <label>Username</label>
                    <input type="text" id="username" name="username" placeholder="Username">
                </div>

                <div class="input_wrap">
                    <label>Password</label>
                    <input type="text" id="password" name="password" placeholder="Password">
                </div>
            </div>
            <div class="submit_wrap">
                <button class="submit_form" id="submitB">Submit</button>
            </div>
        </div>
        <div class="view_wrap">
            <div class="view_div">
                <h1>@ViewBag.Title.</h1>
                <p>
                    This is for only examples purposes, please do not input any
                    sensitive information! This shows a vulnerability within a
                    login system. When an incorrect login is given, it is logged.
                </p>

                <br />
                <h3>Vulnerability example</h3>
                <p><code>&lt;script&gt;alert("hello world");&lt;/script&gt;</code></p>

                <br /><br />
                <p>
                    Once you have submitted your vulnerability/test string, type in "<code>admin</code>" for both the username and password to
                    view the next page.
                </p>

                <br /><br />
                <h3>Test Harness</h3>
                <p>
                    In the "Test" directory, located in the project, there is a file "testInput" which
                    you can use/upload through this button, instead of typing out each payload one by one.
                    You simply upload your file, or just edit ours, and then the test will automatically
                    add all those test strings and then all you have to do is type "<code>admin</code>" to view
                    the next section of the demonstration.
                </p>
                <!---<button onclick="testScript()"> Test! </button> <input class="submit_form" type="file" onchange="getTestFile(this)" /> -->
                <input id="inputB" type="file" />

                <br /><br />
                <div id="Content"></div>
            </div>
        </div>
    </div>
</div>

<script nonce="123456">
    function changePage() {
        $.ajax({
            url: '/Home/Admin',
            type: 'get',
            processData: false,
            success: function (data, textStatus, jQxhr) {
                $("#display").fadeOut('fast', function () {
                    $('#display').html($(data).find('#replaceMe').html());
                    $("#display").fadeIn('fast');
                    updateLog();
                });
            },
            error: function (jqXhr, textStatus, errorThrown) {
                console.log(errorThrown);
                var err = JSON.parse(jqXhr.responseText);
                alert(err.Message);
            }
        });
    }

    $('#inputB').change(function () {
        getTestFile(this);
    });

    $('.submit_form').on('click', function () {
        var username = $("#username").val();
        var password = $("#password").val();

        $.ajax({
            url: '/api/Values/Add/',
            type: 'post',
            contentType: 'application/json',
            data: JSON.stringify({ username: username, password: password }),
            processData: false,
            success: function (data, textStatus, jQxhr) {
                console.log(data);
                if (data == true) {
                    changePage();
                }
                else {
                    createAlert('Error', 'Your username or password is incorrect, please try again.', ' alert-danger"');
                }
            },
            error: function (jqXhr, textStatus, errorThrown) {
                console.log(errorThrown);
            }
        });
    });

    $('.get_vul').on('click', function () {
        $.ajax({
            url: '/api/Values/Get/2',
            type: 'get',
            contentType: 'application/json',
            processData: false,
            success: function (data, textStatus, jQxhr) {
                var obj = data;
                console.log(obj);
                $("#Content").html(obj);
            },
            error: function (jqXhr, textStatus, errorThrown) {
                console.log(errorThrown);
            }
        });
    });

    function createAlert(title, msg, type) {
        $('#addAlert').empty();
        $('#addAlert').append(
            '<div class="alert' + type + 'role="alert">' +
            '<h4 class="alert-heading">' + title + '</h4>' +
            '<button type="button" class="close" data-dismiss="alert">' +
            '&times;</button>' + msg + '</div>');
    }

    function updateLog() {
        $.ajax({
            url: '/api/Values/Update/',
            type: 'get',
            contentType: 'application/json',
            processData: false,
            success: function (data, textStatus, jQxhr) {
                // $("#invalidLoginTable tbody:tr").remove();

                var entries = data;
                console.log(entries);
                if (entries.legnth != 0) {
                    for (var i = 0; i < entries.length; i++) {
                        console.log('is this working');
                        $("#invalidLoginTable > tbody:last-child").append("<tr><td>" + i + "</td><td>" + entries[i].username + "</td><td>" + entries[i].password + "</td></tr>");
                    }
                }
                if (entries.length == 0) {
                    createAlert('Error', 'There are no invalid login attempts to display. Please go back to the login page and put some invalid login attempts.', ' alert-danger"');
                }
                //$("#Content").html(entries);
            },
            error: function (jqXhr, textStatus, errorThrown) {
                console.log(errorThrown);
            }
        });
    }

    function printDB() {
        $.ajax({
            url: '/api/Values/printDB/',
            type: 'get',
            contentType: 'application/json',
            processData: false,
            success: function (data, textStatus, jQxhr) {
                console.log('success');
            },
            error: function (jqXhr, textStatus, errorThrown) {
                console.log(errorThrown);
            }
        });
    }

    function getTestFile(f) {
        let file = f.files[0];
        let r = new FileReader();
        r.readAsText(file);
        r.onload = function () {
            var lines = r.result.split("\r\n");
            testScript(lines);
            //[\\r\\n]+
            /*for (var i = 0; i < lines.length; i++) {
                console.log(lines[i] + ' ' + lines.length);
                testScript(lines[i]);
            }*/


        };
        r.onerror = function () {
            console.log(r.error);
        };
    }

    function testScript(input) {
        //document.getElementById('username').value = "test";
        //document.getElementById('password').value = "test";
        for (var i = 0; i < input.length; i++) {
            console.log(input[i] + ' ' + input.length);
            document.getElementById('username').value = "someusername";
            document.getElementById('password').value = input[i];
            document.getElementById('submitB').click();
        }
        printDB();
    }
</script>